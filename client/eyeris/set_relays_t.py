"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class set_relays_t(object):
    __slots__ = ["nrelays", "relays"]

    __typenames__ = ["int32_t", "boolean"]

    __dimensions__ = [None, ["nrelays"]]

    def __init__(self):
        self.nrelays = 0
        self.relays = []

    def encode(self):
        buf = BytesIO()
        buf.write(set_relays_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.nrelays))
        buf.write(struct.pack('>%db' % self.nrelays, *self.relays[:self.nrelays]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != set_relays_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return set_relays_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = set_relays_t()
        self.nrelays = struct.unpack(">i", buf.read(4))[0]
        self.relays = map(bool, struct.unpack('>%db' % self.nrelays, buf.read(self.nrelays)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if set_relays_t in parents: return 0
        tmphash = (0x7fff9165285f0656) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if set_relays_t._packed_fingerprint is None:
            set_relays_t._packed_fingerprint = struct.pack(">Q", set_relays_t._get_hash_recursive([]))
        return set_relays_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

