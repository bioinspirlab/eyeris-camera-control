"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class control_status_t(object):
    __slots__ = ["timestamp", "temperature", "humidity", "pressure", "power", "current", "voltage", "light_output", "focal_length", "focal_distance", "aperture", "relays"]

    __typenames__ = ["int64_t", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "boolean"]

    __dimensions__ = [None, [2], [2], [2], [2], [2], [2], [6], None, None, None, [4]]

    def __init__(self):
        self.timestamp = 0
        self.temperature = [ 0.0 for dim0 in range(2) ]
        self.humidity = [ 0.0 for dim0 in range(2) ]
        self.pressure = [ 0.0 for dim0 in range(2) ]
        self.power = [ 0.0 for dim0 in range(2) ]
        self.current = [ 0.0 for dim0 in range(2) ]
        self.voltage = [ 0.0 for dim0 in range(2) ]
        self.light_output = [ 0.0 for dim0 in range(6) ]
        self.focal_length = 0.0
        self.focal_distance = 0.0
        self.aperture = 0.0
        self.relays = [ False for dim0 in range(4) ]

    def encode(self):
        buf = BytesIO()
        buf.write(control_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        buf.write(struct.pack('>2d', *self.temperature[:2]))
        buf.write(struct.pack('>2d', *self.humidity[:2]))
        buf.write(struct.pack('>2d', *self.pressure[:2]))
        buf.write(struct.pack('>2d', *self.power[:2]))
        buf.write(struct.pack('>2d', *self.current[:2]))
        buf.write(struct.pack('>2d', *self.voltage[:2]))
        buf.write(struct.pack('>6d', *self.light_output[:6]))
        buf.write(struct.pack(">ddd", self.focal_length, self.focal_distance, self.aperture))
        buf.write(struct.pack('>4b', *self.relays[:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != control_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return control_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = control_status_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.temperature = struct.unpack('>2d', buf.read(16))
        self.humidity = struct.unpack('>2d', buf.read(16))
        self.pressure = struct.unpack('>2d', buf.read(16))
        self.power = struct.unpack('>2d', buf.read(16))
        self.current = struct.unpack('>2d', buf.read(16))
        self.voltage = struct.unpack('>2d', buf.read(16))
        self.light_output = struct.unpack('>6d', buf.read(48))
        self.focal_length, self.focal_distance, self.aperture = struct.unpack(">ddd", buf.read(24))
        self.relays = map(bool, struct.unpack('>4b', buf.read(4)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if control_status_t in parents: return 0
        tmphash = (0xd5a39dfe3ee825cf) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if control_status_t._packed_fingerprint is None:
            control_status_t._packed_fingerprint = struct.pack(">Q", control_status_t._get_hash_recursive([]))
        return control_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

